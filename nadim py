import requests
import os
import re
import time
import sys
import http.server
import socketserver
import threading
from requests.exceptions import RequestException


# Stylish banner with Nadeem's name
def print_banner():
    banner = """
    ╔════════════════════════════════════╗
    ║       CREATED BY NADEEM ANSARI     ║
    ║          Stylish Commenter         ║
    ╚════════════════════════════════════╝
    """
    print(banner)


class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Created by Nadeem Ansari")


class FacebookCommenter:
    def __init__(self):
        self.comment_count = 0

    def comment_on_post(self, cookies, post_id, comment, delay):
        with requests.Session() as session:
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Linux; Android 13; SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.166 Mobile Safari/537.36',
                'Accept-Language': 'en-US,en;q=0.9',
            })

            # Get the Facebook post page
            try:
                response = session.get(f'https://mbasic.facebook.com/{post_id}', cookies={"cookie": cookies})
                response.raise_for_status()
            except RequestException as e:
                print(f"<Error> Failed to load the post: {str(e)}")
                return

            # Extract the required form data
            action_match = re.search(r'method="post" action="([^"]+)"', response.text)
            fb_dtsg_match = re.search(r'name="fb_dtsg" value="([^"]+)"', response.text)
            jazoest_match = re.search(r'name="jazoest" value="([^"]+)"', response.text)

            if not (action_match and fb_dtsg_match and jazoest_match):
                print("<Error> Failed to extract required data from the post page")
                return

            next_action = action_match.group(1).replace('amp;', '')
            fb_dtsg = fb_dtsg_match.group(1)
            jazoest = jazoest_match.group(1)

            # Prepare the data payload
            data = {
                'fb_dtsg': fb_dtsg,
                'jazoest': jazoest,
                'comment_text': comment,
                'comment': 'Submit',
            }

            # Submit the comment
            try:
                response = session.post(f'https://mbasic.facebook.com{next_action}', data=data, cookies={"cookie": cookies})
                response.raise_for_status()

                if 'comment_success' in response.url:
                    self.comment_count += 1
                    print(f"[✔️] Comment #{self.comment_count} successfully posted: {comment}")
                else:
                    print("[❌] Failed to post the comment")
            except RequestException as e:
                print(f"<Error> Failed to submit the comment: {str(e)}")

    def inputs(self):
        try:
            with open('cookies.txt', 'r') as file:
                cookies = file.read().strip()

            with open('post.txt', 'r') as file:
                post_id = file.read().strip()

            with open('comments.txt', 'r') as file:
                comments = [line.strip() for line in file if line.strip()]

            with open('delay.txt', 'r') as file:
                delay = int(file.read().strip())

            if not cookies or not post_id or not comments:
                print("<Error> Missing required data (cookies, post ID, or comments)")
                return

            print("[✔️] Starting the commenting process...")
            for comment in comments:
                time.sleep(delay)
                self.comment_on_post(cookies, post_id, comment, delay)

        except FileNotFoundError as e:
            print(f"<Error> Missing file: {e.filename}")
        except ValueError as e:
            print(f"<Error> Invalid value in input files: {str(e)}")
        except Exception as e:
            print(f"<Error> {str(e)}")


def execute_server():
    PORT = int(os.environ.get('PORT', 4000))
    with socketserver.TCPServer(("", PORT), MyHandler) as httpd:
        print(f"Server running at http://localhost:{PORT}")
        httpd.serve_forever()


if __name__ == "__main__":
    print_banner()

    # Start the server in a separate thread
    server_thread = threading.Thread(target=execute_server)
    server_thread.daemon = True
    server_thread.start()

    # Start the Facebook commenting process
    commenter = FacebookCommenter()
    commenter.inputs()
